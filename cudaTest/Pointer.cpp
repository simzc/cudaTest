//#include <iostream>
//using namespace std;
//int main()
//{
//    /*
//    指针和引用使用细节
//    */
//    cout << "指针和引用使用细节: " << endl;
//    int a = 3, c = 3, d = 3;
//    int* p = &a;
//    int& b = a;
//    cout << p << " " << *p << " " << &p << endl;
//    cout << --(*p) << endl; //通过指针改变指向的值
//    cout << b << " " << &b << " " << a << endl;
//    cout << "********************************" << endl;
//
//
//    /*
//    常量指针和常量引用
//    */
//    //这种一般是用于指向常量，这里例举的是普通变量，一般不推荐这么用，太容易混淆。
//    const int* p2 = &c; //*p2是常量
//    const int& b2 = c;
//    cout << "常量指针和常量引用: " << endl;
//    cout << *p2 << endl;
//    //cout<<--(*p2)<<endl; //常量指针不可改
//    c--;  //指向的变量可改,如果c本身为常量便不可改
//    cout << *p2 << endl;
//    //cout<<--b2<<endl; //常量引用不可改
//    c--;
//    cout << b2 << endl;
//    p2 = &a; //p2不是常量，可改变指向
//    cout << *p2 << " " << p2 << endl;
//    cout << "********************************" << endl;
//
//
//    /*
//    指针常量和引用常量
//    */
//    cout << "指针常量和引用常量: " << endl;
//    int* const p3 = &d;  //p3是常量
//    int& b3 = d; //引用本身就是常量，不用再使用const修饰
//    //p3 = &a;  //出错，p3为常量，不可修改指向
//    cout << *p3 << endl;
//    cout << --(*p3) << endl; //可修改
//    d--; //这个自然是可改的
//    cout << *p3 << " " << d << endl;
//    cout << "********************************" << endl;
//
//
//    /*
//    常量指针常量
//    */
//    cout << "常量指针常量: " << endl;
//    const int x = 3;
//    const int* p4 = &x; //如果是常量，指针的定义只能这样`const int *p = &x;`且必然不可改
//    cout << *p4 << " " << x << endl;
//
//    return 0;
//}